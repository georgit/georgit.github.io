<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teo Georgiev</title>
    <link>https://georgit.github.io/index.xml</link>
    <description>Recent content on Teo Georgiev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Teo Georgiev</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://georgit.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>teaching</title>
      <link>https://georgit.github.io/home/teaching/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/home/teaching/</guid>
      <description>&lt;p&gt;I was a teaching assistant for the following courses at George Washington University:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CS1121: Introduction to C Programming&lt;/li&gt;
&lt;li&gt;(more courses to be added)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>books</title>
      <link>https://georgit.github.io/home/books/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/home/books/</guid>
      <description>&lt;p&gt;Here is a small selection of books I&amp;rsquo;ve read recently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The Vital Question&lt;/em&gt;, by Nick Lane&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Innovators&lt;/em&gt;, by Walter Isaacson&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Emperor&amp;rsquo;s Soul&lt;/em&gt;, by Brandon Sanderson&lt;/li&gt;
&lt;li&gt;&lt;em&gt;I&amp;rsquo;m Feeling Lucky: The Confessions of Google Employee Number 59&lt;/em&gt;, by Douglas Edwards&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Component Forking</title>
      <link>https://georgit.github.io/post/post_02/</link>
      <pubDate>Tue, 31 Jan 2017 10:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/post/post_02/</guid>
      <description>&lt;p&gt;True to my word, this is the first post in a long time.
What have I been working on research-wise?&lt;/p&gt;

&lt;p&gt;As some of you know, I&amp;rsquo;m working on the Composite component-based operating sytem.
More on that can be found &lt;a href=&#34;https://composite.seas.gwu.edu&#34;&gt;here&lt;/a&gt;.
Specifically, my current work is on the shared memory pieces of Composite, and the booter.&lt;/p&gt;

&lt;p&gt;Composite splits the OS into multiple components identified by numbered ids, moving as many as safely possible into user space, leaving only a tiny kernel.
This lets us do some neat things like reboot individual components on failure and provide more security.&lt;/p&gt;

&lt;p&gt;These components are booted up by the booter, which is also a user-level component.
There&amp;rsquo;s another component that provides shared memory to the system in the form of cbufs (Composite buffers).
The booter makes a bunch of these (about a dozen, depending) per component, maps them into its address space, and then kicks the component off.&lt;/p&gt;

&lt;p&gt;I found this interesting in part because of how much it simplified my understanding of what&amp;rsquo;s needed to make a component.
Once you have the component&amp;rsquo;s memory, that&amp;rsquo;s all you need to tell the kernel to get it running (there&amp;rsquo;s also threads, you need threads too).&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ve been trying to do is take advantage of this property by building functionality into the booter that lets it duplicate a component.
We call this &amp;ldquo;forking&amp;rdquo;, after the POSIX term, using the notation O for the original component and F for the fork.
Forking a component creates a copy of it with a new id, but in all other ways the same as the original.
The cbuf manager comes in handy here because it can expedite the process by mapping O&amp;rsquo;s cbufs into F.&lt;/p&gt;

&lt;p&gt;The overall process should sound familiar to those readers who&amp;rsquo;ve worked with POSIX, but there are some things we can&amp;rsquo;t mimic, or just haven&amp;rsquo;t gotten around to yet.
Some of these are design choices and some are due to us not using a monolithic system.
The POSIX interface was made in the days of single-core systems and is somewhat hamstrung by assumptions made at the time.
For one, our process tries to hide from the component that it was forked, while POSIX explicitly notifies the child and parent of their identities.&lt;/p&gt;

&lt;p&gt;So now we have a way to take a component O and create a forked copy of it (F).
What does this give us?
Composite could already reboot components, and quite frequently.
So instead of making a copy of the component, couldn&amp;rsquo;t we just reboot it, treating  the suspicious behavior as a failure?
And - although I haven&amp;rsquo;t gone into this in much detail - why not just boot several instances of the same component at the start of execution?
They wouldn&amp;rsquo;t be forks of each other, but you could switch from one to the other.&lt;/p&gt;

&lt;p&gt;One reason is just to provide functionality similar to POSIX.
Another is that with this technique, we can provide continued execution to the system.
There is a brief pause while forking occurs but not while we decide whether or not O was trustworthy.
We can also do nModular Redundancy by forking components as existing ones fail.
This is the immediate focus.&lt;/p&gt;

&lt;p&gt;But part of the reason I&amp;rsquo;m working on this is simply because it&amp;rsquo;s fun, not because it has immediate applications.
Research is like that a lot; my work won&amp;rsquo;t be featured in the next quarterly earnings report of any major company.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Composite OS</title>
      <link>https://georgit.github.io/project/composite/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/project/composite/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About this site</title>
      <link>https://georgit.github.io/post/firstPost/</link>
      <pubDate>Wed, 20 Apr 2016 10:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/post/firstPost/</guid>
      <description>&lt;p&gt;This is my research site!
I&amp;rsquo;ve always put off making one because I figure everyone who wanted to find me could do so already, and I have no idea what to write about, but now that I&amp;rsquo;m publishing papers, I figure I might as well.
Not sure that there will be a lot of posts here, but I &lt;em&gt;am&lt;/em&gt; sure there will be no Facebook political opinions, since I think we&amp;rsquo;re all tired of those.
Please also note that as my work is in systems, this site is not going to be flashy or fancy.
This is by design.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://georgit.github.io/home/about/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/home/about/</guid>
      <description>

&lt;h1 id=&#34;biography&#34;&gt;Biography&lt;/h1&gt;

&lt;p&gt;I am a PhD student at George Washington University, working with &lt;a href=&#34;https://www.seas.gwu.edu/~gparmer/&#34;&gt;Dr. Gabe Parmer&lt;/a&gt;, mostly on &lt;a href=&#34;http://composite.seas.gwu.edu/&#34;&gt;Composite&lt;/a&gt;.
So far, I have contributed a bit to CBufs and am now working on something more security-based.
Prior to starting my PhD, I worked at Microsoft in Redmond WA, mostly with iOS devices.
Prior to &lt;em&gt;that&lt;/em&gt;, I attended Princeton University majoring in Computer Science in the School of Engineering and Applied Science, and was a member of the Princeton Charter Club, as tech chair.&lt;/p&gt;

&lt;p&gt;In my spare time - and that isn&amp;rsquo;t much - I try to read books and play various RPGs.
I take care of a cat named Pisko (roughly translates to &amp;ldquo;squeaky&amp;rdquo;) and a Russian tortoise named Griswold.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CBufs: Efficient, System-Wide Memory Mangement and Sharing</title>
      <link>https://georgit.github.io/publication/ismm2016/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://georgit.github.io/publication/ismm2016/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>